export LDFLAGS="-L/opt/homebrew/lib"
export CPPFLAGS="-I/opt/homebrew/include"

export RUBYOPT=rubygems

export WASMTIME_HOME="$HOME/.wasmtime"
export PATH="$WASMTIME_HOME/bin:$PATH"

export DENO_INSTALL="$HOME/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"

# Zsh options {{{
HISTFILE=$HOME/.zsh_history
HISTSIZE=50000
SAVEHIST=10000
bindkey -e
setopt extended_glob
setopt hist_expire_dups_first
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt hist_save_no_dups
setopt inc_append_history
setopt prompt_subst
unsetopt BEEP

# }}}
# Prompt {{{
# Concepts:
# - Normal operation should not change the input start position.
# - Special operations (e.g., changing users) should change the input start position.
# - When recording the contents of the terminal display by copying and pasting, the recorded
#   contents should not depend on the window size.
PROMPT_LOCATION_INFO='%B%m:%~%b'
PROMPT_MAIN='%B%n[%D{%H:%M}]%#%b '
PROMPT=$'\n'"${PROMPT_LOCATION_INFO}"$'\n'"${PROMPT_MAIN}"

# }}}
# Fuzzy finder {{{
export FZF_DEFAULT_OPTS="--height=40% --layout=reverse --info=inline --border --margin=1 --padding=1"
export RUNEWIDTH_EASTASIAN=0

[ -f "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.zsh ] && source "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.zsh

# }}}
# Colors for jq {{{
# See https://jqlang.github.io/jq/manual/#colors.
#
# color for null
# color for false
# color for true
# color for numbers
# color for strings
# color for arrays
# color for objects
# color for object keys
#
# 0	Reset all attributes
# 1	Bright
# 2	Dim
# 4	Underscore
# 5	Blink
# 7	Reverse
# 8	Hidden
#
# 	Foreground Colours
# 30	Black
# 31	Red
# 32	Green
# 33	Yellow
# 34	Blue
# 35	Magenta
# 36	Cyan
# 37	White

export JQ_COLORS='0;90:0;36:0;36:0;39:0;32:1;39:1;39:0;33'

# }}}
# Custom functions {{{
cd-repo() {
  REPO_NAME="$(ghq list | fzf)"
  [[ -n "${REPO_NAME}" ]] && cd "$(ghq root)/${REPO_NAME}"
}

code-repo() {
  REPO_NAME="$(ghq list | fzf)"
  [[ -n "${REPO_NAME}" ]] && code "$(ghq root)/${REPO_NAME}"
}

check-mbtiles() {
  (
    set -e
    if [ $# != 4 ]; then
      return 1
    fi

    local mbtiles_fname="$1"
    local z="$2"
    local x="$3"
    local y="$4"
    local y_eff=$(echo "2^${z}-${y}" | bc)

    sqlite3 "${mbtiles_fname}" \
      "select quote(tile_data) from tiles where zoom_level=${z} and tile_column=${x} and tile_row=${y_eff};" \
      | cut -d\' -f2 | xxd -r -p | zcat \
      | protoc --decode=vector_tile.Tile -I ~/ghq/github.com/mapbox/vector-tile-spec/2.1 vector_tile.proto
  )
}

ru-json-diff() {
  diff -u <(cutruhead "$1" | jq .) <(cutruhead "$2" | jq .)
}

ru-geojson-featurecollection-length() {
  cutruhead "$1" | jq '.features | length'
}

stock-get() {
  (
    set -e
    if [ $# != 5 ]; then
      return 1
    fi

    local bucket_name="$1"
    local tagid="$2"
    local date="$3"
    local time_pat="$4"
    local out_dir="$5"

    if [ ${#tagid} != 9 ]; then
      return 1
    fi
    if [ ${#date} != 8 ]; then
      return 1
    fi

    local year="${date:0:4}"
    local month="${date:4:2}"
    local day="${date:6:2}"
    local prefix="s3://${bucket_name}/${tagid}/${year}/${month}/${day}/"

    echo "aws s3 ls ${prefix} | awk '{print \$4;}' | grep '${date}${time_pat}'" 1>&2
    aws s3 ls "${prefix}" | awk '{print $4;}' | grep "${date}${time_pat}" | while IFS= read -r item; do
      aws s3 cp "${prefix}${item}" "${out_dir}"
    done
  )
}

connect-intra() {
  trap "networksetup -setsocksfirewallproxystate Wi-Fi off; exit" 1 2 3 15
  networksetup -setsocksfirewallproxystate Wi-Fi on
  ssh -N tunnel
  networksetup -setsocksfirewallproxystate Wi-Fi off
}
# }}}
# Custom key bindings {{{
# Backward killing for paths/URLs.
tcsh-backward-delete-word () {
  local WORDCHARS="${WORDCHARS:s#/#}"
  zle backward-delete-word
}

zle -N tcsh-backward-delete-word
bindkey '^W' tcsh-backward-delete-word

# }}}
# Completions {{{
fpath+=~/.zfunc
autoload -U compinit
compinit

# }}}
# vim: set filetype=zsh foldmethod=marker foldlevel=0 :
